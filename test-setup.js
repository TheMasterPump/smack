#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la configuration du launchpad
 * Usage: node test-setup.js
 */

const chalk = require('chalk');
const fs = require('fs');
const path = require('path');
const { Connection, PublicKey } = require('@solana/web3.js');

console.log(chalk.blue.bold('\nüöÄ SMACK LAUNCHPAD - TEST DE CONFIGURATION\n'));

let errors = 0;
let warnings = 0;

// Test 1: V√©rifier les fichiers importants
console.log(chalk.yellow('üìÅ V√©rification des fichiers...'));

const requiredFiles = [
  'package.json',
  'src/App.js',
  'src/TokenForm.js',
  'src/TokenPage.js',
  'src/components/BuyBox.js',
  'src/utils/bondingClient.js',
  'backend/package.json',
  'backend/index.js',
  'backend/utils/solanaUtils.js'
];

requiredFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    console.log(chalk.green(`  ‚úÖ ${file}`));
  } else {
    console.log(chalk.red(`  ‚ùå ${file} - MANQUANT`));
    errors++;
  }
});

// Test 2: V√©rifier la configuration
console.log(chalk.yellow('\nüîß V√©rification de la configuration...'));

const envPath = path.join(__dirname, '.env');
if (fs.existsSync(envPath)) {
  console.log(chalk.green('  ‚úÖ Fichier .env trouv√©'));
} else {
  console.log(chalk.orange('  ‚ö†Ô∏è  Fichier .env non trouv√© - Utilisation des valeurs par d√©faut'));
  warnings++;
}

// Test 3: V√©rifier les d√©pendances NPM
console.log(chalk.yellow('\nüì¶ V√©rification des d√©pendances...'));

const packageJson = require('./package.json');
const requiredDeps = [
  '@solana/web3.js',
  '@solana/wallet-adapter-react',
  '@solana/spl-token',
  '@project-serum/anchor',
  'react',
  'react-router-dom'
];

requiredDeps.forEach(dep => {
  if (packageJson.dependencies[dep]) {
    console.log(chalk.green(`  ‚úÖ ${dep}`));
  } else {
    console.log(chalk.red(`  ‚ùå ${dep} - NON INSTALL√â`));
    errors++;
  }
});

// Test 4: V√©rifier la connexion Solana
console.log(chalk.yellow('\nüåê Test de connexion Solana...'));

async function testSolanaConnection() {
  try {
    const connection = new Connection('https://api.devnet.solana.com', 'confirmed');
    const version = await connection.getVersion();
    console.log(chalk.green(`  ‚úÖ Connexion √† Solana devnet r√©ussie`));
    console.log(chalk.gray(`     Version: ${version['solana-core']}`));
    
    // V√©rifier le programme
    const programId = new PublicKey('EJ7dWpEMiUJ5jTjg3EkfS2hGY48PSrEM8r54HrFgZNrA');
    const programInfo = await connection.getAccountInfo(programId);
    
    if (programInfo) {
      console.log(chalk.green(`  ‚úÖ Programme de bonding curve trouv√©`));
      console.log(chalk.gray(`     Taille: ${programInfo.data.length} bytes`));
    } else {
      console.log(chalk.orange(`  ‚ö†Ô∏è  Programme de bonding curve non trouv√© sur devnet`));
      warnings++;
    }
  } catch (error) {
    console.log(chalk.red(`  ‚ùå Erreur de connexion: ${error.message}`));
    errors++;
  }
}

// Test 5: V√©rifier le backend
console.log(chalk.yellow('\nüñ•Ô∏è  V√©rification du backend...'));

const backendKeypairPath = path.join(__dirname, 'backend', 'admin-keypair.json');
if (fs.existsSync(backendKeypairPath)) {
  console.log(chalk.green('  ‚úÖ Fichier admin-keypair.json trouv√©'));
} else {
  console.log(chalk.red('  ‚ùå Fichier admin-keypair.json MANQUANT'));
  console.log(chalk.gray('     Cr√©ez un wallet Solana et placez le keypair dans backend/admin-keypair.json'));
  errors++;
}

// Test 6: V√©rifier les ports
console.log(chalk.yellow('\nüîå V√©rification des ports...'));

const net = require('net');

function checkPort(port, name) {
  return new Promise((resolve) => {
    const server = net.createServer();
    server.once('error', () => {
      console.log(chalk.orange(`  ‚ö†Ô∏è  Port ${port} occup√© (${name} peut √™tre en cours d'ex√©cution)`));
      warnings++;
      resolve();
    });
    server.once('listening', () => {
      console.log(chalk.green(`  ‚úÖ Port ${port} disponible pour ${name}`));
      server.close();
      resolve();
    });
    server.listen(port);
  });
}

async function runTests() {
  await testSolanaConnection();
  await checkPort(3000, 'Frontend');
  await checkPort(4000, 'Backend');
  
  // R√©sum√©
  console.log(chalk.blue.bold('\nüìä R√âSUM√â DU TEST\n'));
  
  if (errors === 0 && warnings === 0) {
    console.log(chalk.green.bold('‚ú® Tout est pr√™t ! Le launchpad peut √™tre d√©marr√©.'));
    console.log(chalk.gray('\nPour d√©marrer :'));
    console.log(chalk.gray('  1. Backend:  cd backend && npm start'));
    console.log(chalk.gray('  2. Frontend: npm start'));
  } else {
    if (errors > 0) {
      console.log(chalk.red(`‚ùå ${errors} erreur(s) trouv√©e(s) - Correction n√©cessaire`));
    }
    if (warnings > 0) {
      console.log(chalk.orange(`‚ö†Ô∏è  ${warnings} avertissement(s) - V√©rification recommand√©e`));
    }
    console.log(chalk.gray('\nConsultez setup.md pour plus d\'informations'));
  }
  
  console.log(chalk.blue('\nüîó Liens utiles:'));
  console.log(chalk.gray('  ‚Ä¢ Solana Faucet: https://solfaucet.com/'));
  console.log(chalk.gray('  ‚Ä¢ Phantom Wallet: https://phantom.app/'));
  console.log(chalk.gray('  ‚Ä¢ Solana Explorer: https://explorer.solana.com/?cluster=devnet\n'));
}

runTests().catch(console.error);